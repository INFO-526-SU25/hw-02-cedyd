---
title: "HW 02"
author: "Cedric Destin"
format: 
  html:
    embed-resources: true
toc: true
---

## 1 - A new day, a new plot, a new geom

```{r}
#| label: label-me-1
options(warn=-1)
if (!require("pacman")) 
  install.packages("pacman")

# use this line for installing/loading
pacman::p_load(tidyverse,
               glue,
               scales,
               openintro,
               gridExtra,
               ggrepel,
               ggmap,
               ggridges,
               dsbox,
               devtools,
               fs,
               janitor) 
```

**A new day, a new plot, a new geom.** The goal of this exercise is to learn about a new type of plot (ridgeline plot) and to learn how to make it.

Use the `geom_density_ridges()` function from the **ggridges** package to make a ridge plot of of Airbnb review scores of Edinburgh neighborhoods. *The neighborhoods should be ordered by their median review scores.* The data can be found in the **dsbox** package, and it’s called `edibnb`. *Also include an interpretation for your visualization.* You should review feedback from your Homework 1 to make sure you capture anything you may have missed previously.

*(Note:* This is not a geom we introduced in class, so seeing an example of it in action will be helpful. Read the package README at <https://wilkelab.org/ggridges> and/or the introduction vignette at <https://wilkelab.org/ggridges/articles/introduction.html>. There is more information than you need for this question in the vignette; the first section on Geoms should be sufficient to help you get started.)

```{r}
devtools::install_github("tidyverse/dsbox")
library(dsbox)
my_edibnb_data <- edibnb
```

```{r}
library(ggplot2)
library(ggridges)

ggplot(my_edibnb_data %>% filter(!is.na(review_scores_rating)), 
       aes(x = review_scores_rating, 
           y = fct_reorder(neighbourhood, 
                           review_scores_rating, .fun = median), 
           fill = neighbourhood)) +
  geom_density_ridges() +
  xlim(75, 105) +
  labs(title = "Edinburgh - Ridge Plot",
      x = "Review Score Rating",
      y = "Neighbourhood")
# Observations:

# The plot above showing the ridge lines per neighborhoods in the city of Scotland, shows that all of the neighborhoods have very similar ratings, centered at ~95. All of the neighborhoods have a small hump at 80, and then they increase, until they reach 100. Based on the data, I would think that we should get a very good experience renting a house in Edinburgh.
```

```{r}
# get a list of files with "Foreign Connected PAC" in their names
list_of_files <- dir_ls(path = "data", regexp = "Foreign Connected PAC")

# read all files and row bind them
# keeping track of the file name in a new column called year
pac <- read_csv(list_of_files, id = "year")
```

```{r}
library(stringr)
library(dplyr)
pac <- pac |>
  mutate(
    # Create a new column named 'election_year'
    year = str_extract(year, "(?<=-)\\d{4}"),

    # Convert the new column from text to a number (optional but recommended)
    year = as.numeric(year),
    pac_name_affiliate = `PAC Name (Affiliate)`,
    Democrat = as.numeric(str_extract(Dems, "\\d+")),
    Republican = as.numeric(str_extract(Repubs, "\\d+"))
  )

pac <- pac |>
  separate(
    col = `Country of Origin/Parent Company`,
    into = c("country", "parent_company"),
    sep = "/",
    extra = "merge",
    remove = TRUE
  )

pac <- pac |>
  select(-`PAC Name (Affiliate)`)
pac <- pac |>
  select(-Dems)
pac <- pac |>
  select(-Repubs)
pac <- pac |>
  select(-Total)

```

```{r}
pac <- pac %>%
  pivot_longer(
    cols = c(Democrat, Republican),
    names_to = "party",
    values_to = "amount"
  )

head(pac)
```

```{r}
sum_per_category <- pac %>%
  group_by(year, party, country) %>%
  summarize(Total_Value = sum(amount), .groups = "keep")

```

```{r}
ggplot(data = filter(sum_per_category, country == "UK"),
          aes(x = year, 
              y = Total_Value, 
              group = party,
              color = party)
       ) + 
  geom_line(linewidth = 1) +
  guides(color = guide_legend(title = "Party")) +
  scale_color_manual(values = c("blue", "red")) +
  scale_y_continuous(labels = function(x) paste0("$", x/1000000, "M")) +
  theme_minimal() +
  theme(legend.position = "inside",
      legend.position.inside = c(0.95,0.2),
      axis.title.x = element_text(hjust=0),
      axis.title.y = element_text(hjust=0)) +
  labs(title = "Contributions to US political parties from UK-connected PACs",
       x = "Year",
       y = "Total amount",
       caption = "OpenSecrets.org")
```

```{r}
ggplot(data = filter(sum_per_category, country == "China"),
          aes(x = year, 
              y = Total_Value, 
              group = party,
              color = party)
       ) + 
  geom_line(linewidth = 1) +
  guides(color = guide_legend(title = "Party")) +
  scale_color_manual(values = c("blue", "red")) +
  scale_y_continuous(labels = function(x) paste0("$", x/1000000, "M")) +
  theme_minimal() +
  theme(legend.position = "inside",
      legend.position.inside = c(0.9,0.15),
      axis.title.x = element_text(hjust=0),
      axis.title.y = element_text(hjust=0)) +
  labs(title = "Contributions to US political parties from China-connected PACs",
       x = "Year",
       y = "Total amount",
       caption = "OpenSecrets.org")
```

```         
This new data that was just made is very interesting! Although the Chinese affiliated countries invested less than the UK affiliated countries, the Chinese affiliated countries increased the total countributions to the US elections increased over the years. And despite the Republicans being agains the Chinese government, the Republican donations still increased in the recent years.
```

## 3 - Median housing prices in the US

```{r}

```

## 4 - Expect More. Plot More.

## 5 - Mirror, mirror on the wall, who’s the ugliest of them all?
